

Terminals which are not used:

   ERROR



Grammar
rule 1    program -> stmt_seq
rule 2    stmt_seq -> stmt_seq SEMI stmt
rule 3    stmt_seq -> stmt
rule 4    stmt -> if_stmt
rule 5    stmt -> repeat_stmt
rule 6    stmt -> assign_stmt
rule 7    stmt -> read_stmt
rule 8    stmt -> write_stmt
rule 9    stmt -> error
rule 10   if_stmt -> IF exp THEN stmt_seq END
rule 11   if_stmt -> IF exp THEN stmt_seq ELSE stmt_seq END
rule 12   repeat_stmt -> REPEAT stmt_seq UNTIL exp
rule 13   @1 ->		/* empty */
rule 14   assign_stmt -> ID @1 ASSIGN exp
rule 15   read_stmt -> READ ID
rule 16   write_stmt -> WRITE exp
rule 17   exp -> simple_exp LT simple_exp
rule 18   exp -> simple_exp EQ simple_exp
rule 19   exp -> simple_exp
rule 20   simple_exp -> simple_exp PLUS term
rule 21   simple_exp -> simple_exp MINUS term
rule 22   simple_exp -> term
rule 23   term -> term TIMES factor
rule 24   term -> term OVER factor
rule 25   term -> factor
rule 26   factor -> LPAREN exp RPAREN
rule 27   factor -> NUM
rule 28   factor -> ID
rule 29   factor -> error

Terminals, with rules where they appear

$ (-1)
error (256) 9 29
IF (258) 10 11
THEN (259) 10 11
ELSE (260) 11
END (261) 10 11
REPEAT (262) 12
UNTIL (263) 12
READ (264) 15
WRITE (265) 16
ID (266) 14 15 28
NUM (267) 27
ASSIGN (268) 14
EQ (269) 18
LT (270) 17
PLUS (271) 20
MINUS (272) 21
TIMES (273) 23
OVER (274) 24
LPAREN (275) 26
RPAREN (276) 26
SEMI (277) 2
ERROR (278)

Nonterminals, with rules where they appear

program (24)
    on left: 1
stmt_seq (25)
    on left: 2 3, on right: 1 2 10 11 12
stmt (26)
    on left: 4 5 6 7 8 9, on right: 2 3
if_stmt (27)
    on left: 10 11, on right: 4
repeat_stmt (28)
    on left: 12, on right: 5
assign_stmt (29)
    on left: 14, on right: 6
@1 (30)
    on left: 13, on right: 14
read_stmt (31)
    on left: 15, on right: 7
write_stmt (32)
    on left: 16, on right: 8
exp (33)
    on left: 17 18 19, on right: 10 11 12 14 16 26
simple_exp (34)
    on left: 20 21 22, on right: 17 18 19 20 21
term (35)
    on left: 23 24 25, on right: 20 21 22 23 24
factor (36)
    on left: 26 27 28 29, on right: 23 24 25


state 0

    error	shift, and go to state 1
    IF  	shift, and go to state 2
    REPEAT	shift, and go to state 3
    READ	shift, and go to state 4
    WRITE	shift, and go to state 5
    ID  	shift, and go to state 6

    program	go to state 52
    stmt_seq	go to state 7
    stmt	go to state 8
    if_stmt	go to state 9
    repeat_stmt	go to state 10
    assign_stmt	go to state 11
    read_stmt	go to state 12
    write_stmt	go to state 13



state 1

    stmt  ->  error .   (rule 9)

    $default	reduce using rule 9 (stmt)



state 2

    if_stmt  ->  IF . exp THEN stmt_seq END   (rule 10)
    if_stmt  ->  IF . exp THEN stmt_seq ELSE stmt_seq END   (rule 11)

    error	shift, and go to state 14
    ID  	shift, and go to state 15
    NUM 	shift, and go to state 16
    LPAREN	shift, and go to state 17

    exp 	go to state 18
    simple_exp	go to state 19
    term	go to state 20
    factor	go to state 21



state 3

    repeat_stmt  ->  REPEAT . stmt_seq UNTIL exp   (rule 12)

    error	shift, and go to state 1
    IF  	shift, and go to state 2
    REPEAT	shift, and go to state 3
    READ	shift, and go to state 4
    WRITE	shift, and go to state 5
    ID  	shift, and go to state 6

    stmt_seq	go to state 22
    stmt	go to state 8
    if_stmt	go to state 9
    repeat_stmt	go to state 10
    assign_stmt	go to state 11
    read_stmt	go to state 12
    write_stmt	go to state 13



state 4

    read_stmt  ->  READ . ID   (rule 15)

    ID  	shift, and go to state 23



state 5

    write_stmt  ->  WRITE . exp   (rule 16)

    error	shift, and go to state 14
    ID  	shift, and go to state 15
    NUM 	shift, and go to state 16
    LPAREN	shift, and go to state 17

    exp 	go to state 24
    simple_exp	go to state 19
    term	go to state 20
    factor	go to state 21



state 6

    assign_stmt  ->  ID . @1 ASSIGN exp   (rule 14)

    $default	reduce using rule 13 (@1)

    @1  	go to state 25



state 7

    program  ->  stmt_seq .   (rule 1)
    stmt_seq  ->  stmt_seq . SEMI stmt   (rule 2)

    SEMI	shift, and go to state 26

    $default	reduce using rule 1 (program)



state 8

    stmt_seq  ->  stmt .   (rule 3)

    $default	reduce using rule 3 (stmt_seq)



state 9

    stmt  ->  if_stmt .   (rule 4)

    $default	reduce using rule 4 (stmt)



state 10

    stmt  ->  repeat_stmt .   (rule 5)

    $default	reduce using rule 5 (stmt)



state 11

    stmt  ->  assign_stmt .   (rule 6)

    $default	reduce using rule 6 (stmt)



state 12

    stmt  ->  read_stmt .   (rule 7)

    $default	reduce using rule 7 (stmt)



state 13

    stmt  ->  write_stmt .   (rule 8)

    $default	reduce using rule 8 (stmt)



state 14

    factor  ->  error .   (rule 29)

    $default	reduce using rule 29 (factor)



state 15

    factor  ->  ID .   (rule 28)

    $default	reduce using rule 28 (factor)



state 16

    factor  ->  NUM .   (rule 27)

    $default	reduce using rule 27 (factor)



state 17

    factor  ->  LPAREN . exp RPAREN   (rule 26)

    error	shift, and go to state 14
    ID  	shift, and go to state 15
    NUM 	shift, and go to state 16
    LPAREN	shift, and go to state 17

    exp 	go to state 27
    simple_exp	go to state 19
    term	go to state 20
    factor	go to state 21



state 18

    if_stmt  ->  IF exp . THEN stmt_seq END   (rule 10)
    if_stmt  ->  IF exp . THEN stmt_seq ELSE stmt_seq END   (rule 11)

    THEN	shift, and go to state 28



state 19

    exp  ->  simple_exp . LT simple_exp   (rule 17)
    exp  ->  simple_exp . EQ simple_exp   (rule 18)
    exp  ->  simple_exp .   (rule 19)
    simple_exp  ->  simple_exp . PLUS term   (rule 20)
    simple_exp  ->  simple_exp . MINUS term   (rule 21)

    EQ  	shift, and go to state 29
    LT  	shift, and go to state 30
    PLUS	shift, and go to state 31
    MINUS	shift, and go to state 32

    $default	reduce using rule 19 (exp)



state 20

    simple_exp  ->  term .   (rule 22)
    term  ->  term . TIMES factor   (rule 23)
    term  ->  term . OVER factor   (rule 24)

    TIMES	shift, and go to state 33
    OVER	shift, and go to state 34

    $default	reduce using rule 22 (simple_exp)



state 21

    term  ->  factor .   (rule 25)

    $default	reduce using rule 25 (term)



state 22

    stmt_seq  ->  stmt_seq . SEMI stmt   (rule 2)
    repeat_stmt  ->  REPEAT stmt_seq . UNTIL exp   (rule 12)

    UNTIL	shift, and go to state 35
    SEMI	shift, and go to state 26



state 23

    read_stmt  ->  READ ID .   (rule 15)

    $default	reduce using rule 15 (read_stmt)



state 24

    write_stmt  ->  WRITE exp .   (rule 16)

    $default	reduce using rule 16 (write_stmt)



state 25

    assign_stmt  ->  ID @1 . ASSIGN exp   (rule 14)

    ASSIGN	shift, and go to state 36



state 26

    stmt_seq  ->  stmt_seq SEMI . stmt   (rule 2)

    error	shift, and go to state 1
    IF  	shift, and go to state 2
    REPEAT	shift, and go to state 3
    READ	shift, and go to state 4
    WRITE	shift, and go to state 5
    ID  	shift, and go to state 6

    stmt	go to state 37
    if_stmt	go to state 9
    repeat_stmt	go to state 10
    assign_stmt	go to state 11
    read_stmt	go to state 12
    write_stmt	go to state 13



state 27

    factor  ->  LPAREN exp . RPAREN   (rule 26)

    RPAREN	shift, and go to state 38



state 28

    if_stmt  ->  IF exp THEN . stmt_seq END   (rule 10)
    if_stmt  ->  IF exp THEN . stmt_seq ELSE stmt_seq END   (rule 11)

    error	shift, and go to state 1
    IF  	shift, and go to state 2
    REPEAT	shift, and go to state 3
    READ	shift, and go to state 4
    WRITE	shift, and go to state 5
    ID  	shift, and go to state 6

    stmt_seq	go to state 39
    stmt	go to state 8
    if_stmt	go to state 9
    repeat_stmt	go to state 10
    assign_stmt	go to state 11
    read_stmt	go to state 12
    write_stmt	go to state 13



state 29

    exp  ->  simple_exp EQ . simple_exp   (rule 18)

    error	shift, and go to state 14
    ID  	shift, and go to state 15
    NUM 	shift, and go to state 16
    LPAREN	shift, and go to state 17

    simple_exp	go to state 40
    term	go to state 20
    factor	go to state 21



state 30

    exp  ->  simple_exp LT . simple_exp   (rule 17)

    error	shift, and go to state 14
    ID  	shift, and go to state 15
    NUM 	shift, and go to state 16
    LPAREN	shift, and go to state 17

    simple_exp	go to state 41
    term	go to state 20
    factor	go to state 21



state 31

    simple_exp  ->  simple_exp PLUS . term   (rule 20)

    error	shift, and go to state 14
    ID  	shift, and go to state 15
    NUM 	shift, and go to state 16
    LPAREN	shift, and go to state 17

    term	go to state 42
    factor	go to state 21



state 32

    simple_exp  ->  simple_exp MINUS . term   (rule 21)

    error	shift, and go to state 14
    ID  	shift, and go to state 15
    NUM 	shift, and go to state 16
    LPAREN	shift, and go to state 17

    term	go to state 43
    factor	go to state 21



state 33

    term  ->  term TIMES . factor   (rule 23)

    error	shift, and go to state 14
    ID  	shift, and go to state 15
    NUM 	shift, and go to state 16
    LPAREN	shift, and go to state 17

    factor	go to state 44



state 34

    term  ->  term OVER . factor   (rule 24)

    error	shift, and go to state 14
    ID  	shift, and go to state 15
    NUM 	shift, and go to state 16
    LPAREN	shift, and go to state 17

    factor	go to state 45



state 35

    repeat_stmt  ->  REPEAT stmt_seq UNTIL . exp   (rule 12)

    error	shift, and go to state 14
    ID  	shift, and go to state 15
    NUM 	shift, and go to state 16
    LPAREN	shift, and go to state 17

    exp 	go to state 46
    simple_exp	go to state 19
    term	go to state 20
    factor	go to state 21



state 36

    assign_stmt  ->  ID @1 ASSIGN . exp   (rule 14)

    error	shift, and go to state 14
    ID  	shift, and go to state 15
    NUM 	shift, and go to state 16
    LPAREN	shift, and go to state 17

    exp 	go to state 47
    simple_exp	go to state 19
    term	go to state 20
    factor	go to state 21



state 37

    stmt_seq  ->  stmt_seq SEMI stmt .   (rule 2)

    $default	reduce using rule 2 (stmt_seq)



state 38

    factor  ->  LPAREN exp RPAREN .   (rule 26)

    $default	reduce using rule 26 (factor)



state 39

    stmt_seq  ->  stmt_seq . SEMI stmt   (rule 2)
    if_stmt  ->  IF exp THEN stmt_seq . END   (rule 10)
    if_stmt  ->  IF exp THEN stmt_seq . ELSE stmt_seq END   (rule 11)

    ELSE	shift, and go to state 48
    END 	shift, and go to state 49
    SEMI	shift, and go to state 26



state 40

    exp  ->  simple_exp EQ simple_exp .   (rule 18)
    simple_exp  ->  simple_exp . PLUS term   (rule 20)
    simple_exp  ->  simple_exp . MINUS term   (rule 21)

    PLUS	shift, and go to state 31
    MINUS	shift, and go to state 32

    $default	reduce using rule 18 (exp)



state 41

    exp  ->  simple_exp LT simple_exp .   (rule 17)
    simple_exp  ->  simple_exp . PLUS term   (rule 20)
    simple_exp  ->  simple_exp . MINUS term   (rule 21)

    PLUS	shift, and go to state 31
    MINUS	shift, and go to state 32

    $default	reduce using rule 17 (exp)



state 42

    simple_exp  ->  simple_exp PLUS term .   (rule 20)
    term  ->  term . TIMES factor   (rule 23)
    term  ->  term . OVER factor   (rule 24)

    TIMES	shift, and go to state 33
    OVER	shift, and go to state 34

    $default	reduce using rule 20 (simple_exp)



state 43

    simple_exp  ->  simple_exp MINUS term .   (rule 21)
    term  ->  term . TIMES factor   (rule 23)
    term  ->  term . OVER factor   (rule 24)

    TIMES	shift, and go to state 33
    OVER	shift, and go to state 34

    $default	reduce using rule 21 (simple_exp)



state 44

    term  ->  term TIMES factor .   (rule 23)

    $default	reduce using rule 23 (term)



state 45

    term  ->  term OVER factor .   (rule 24)

    $default	reduce using rule 24 (term)



state 46

    repeat_stmt  ->  REPEAT stmt_seq UNTIL exp .   (rule 12)

    $default	reduce using rule 12 (repeat_stmt)



state 47

    assign_stmt  ->  ID @1 ASSIGN exp .   (rule 14)

    $default	reduce using rule 14 (assign_stmt)



state 48

    if_stmt  ->  IF exp THEN stmt_seq ELSE . stmt_seq END   (rule 11)

    error	shift, and go to state 1
    IF  	shift, and go to state 2
    REPEAT	shift, and go to state 3
    READ	shift, and go to state 4
    WRITE	shift, and go to state 5
    ID  	shift, and go to state 6

    stmt_seq	go to state 50
    stmt	go to state 8
    if_stmt	go to state 9
    repeat_stmt	go to state 10
    assign_stmt	go to state 11
    read_stmt	go to state 12
    write_stmt	go to state 13



state 49

    if_stmt  ->  IF exp THEN stmt_seq END .   (rule 10)

    $default	reduce using rule 10 (if_stmt)



state 50

    stmt_seq  ->  stmt_seq . SEMI stmt   (rule 2)
    if_stmt  ->  IF exp THEN stmt_seq ELSE stmt_seq . END   (rule 11)

    END 	shift, and go to state 51
    SEMI	shift, and go to state 26



state 51

    if_stmt  ->  IF exp THEN stmt_seq ELSE stmt_seq END .   (rule 11)

    $default	reduce using rule 11 (if_stmt)



state 52

    $   	go to state 53



state 53

    $   	go to state 54



state 54

    $default	accept
