
Grammar
rule 1    head -> prog
rule 2    prog -> jump_mark func
rule 3    func -> INT id '(' ')' func_body
rule 4    func_body -> '{' stmt_list '}'
rule 5    stmt_list -> stmt
rule 6    stmt_list -> stmt_list mark stmt
rule 7    stmt -> IF '(' cond ')' mark stmt jump_mark ELSE mark stmt
rule 8    stmt -> assign ';'
rule 9    stmt -> RET NUM ';'
rule 10   stmt -> WHILE '(' cond ')' stmt
rule 11   assign -> id '=' expr
rule 12   cond -> expr EQ expr
rule 13   cond -> expr LE expr
rule 14   expr -> id
rule 15   expr -> NUM
rule 16   id -> IDENT
rule 17   mark ->		/* empty */
rule 18   jump_mark ->		/* empty */

Terminals, with rules where they appear

$ (-1)
'(' (40) 3 7 10
')' (41) 3 7 10
';' (59) 8 9
'=' (61) 11
'{' (123) 4
'}' (125) 4
error (256)
EQ (258) 12
LE (259) 13
IDENT (260) 16
NUM (261) 9 15
INT (262) 3
IF (263) 7
ELSE (264) 7
RET (265) 9
WHILE (266) 10

Nonterminals, with rules where they appear

head (18)
    on left: 1
prog (19)
    on left: 2, on right: 1
func (20)
    on left: 3, on right: 2
func_body (21)
    on left: 4, on right: 3
stmt_list (22)
    on left: 5 6, on right: 4 6
stmt (23)
    on left: 7 8 9 10, on right: 5 6 7 10
assign (24)
    on left: 11, on right: 8
cond (25)
    on left: 12 13, on right: 7 10
expr (26)
    on left: 14 15, on right: 11 12 13
id (27)
    on left: 16, on right: 3 11 14
mark (28)
    on left: 17, on right: 6 7
jump_mark (29)
    on left: 18, on right: 2 7


state 0

    $default	reduce using rule 18 (jump_mark)

    head	go to state 46
    prog	go to state 1
    jump_mark	go to state 2



state 1

    head  ->  prog .   (rule 1)

    $default	reduce using rule 1 (head)



state 2

    prog  ->  jump_mark . func   (rule 2)

    INT 	shift, and go to state 3

    func	go to state 4



state 3

    func  ->  INT . id '(' ')' func_body   (rule 3)

    IDENT	shift, and go to state 5

    id  	go to state 6



state 4

    prog  ->  jump_mark func .   (rule 2)

    $default	reduce using rule 2 (prog)



state 5

    id  ->  IDENT .   (rule 16)

    $default	reduce using rule 16 (id)



state 6

    func  ->  INT id . '(' ')' func_body   (rule 3)

    '(' 	shift, and go to state 7



state 7

    func  ->  INT id '(' . ')' func_body   (rule 3)

    ')' 	shift, and go to state 8



state 8

    func  ->  INT id '(' ')' . func_body   (rule 3)

    '{' 	shift, and go to state 9

    func_body	go to state 10



state 9

    func_body  ->  '{' . stmt_list '}'   (rule 4)

    IDENT	shift, and go to state 5
    IF  	shift, and go to state 11
    RET 	shift, and go to state 12
    WHILE	shift, and go to state 13

    stmt_list	go to state 14
    stmt	go to state 15
    assign	go to state 16
    id  	go to state 17



state 10

    func  ->  INT id '(' ')' func_body .   (rule 3)

    $default	reduce using rule 3 (func)



state 11

    stmt  ->  IF . '(' cond ')' mark stmt jump_mark ELSE mark stmt   (rule 7)

    '(' 	shift, and go to state 18



state 12

    stmt  ->  RET . NUM ';'   (rule 9)

    NUM 	shift, and go to state 19



state 13

    stmt  ->  WHILE . '(' cond ')' stmt   (rule 10)

    '(' 	shift, and go to state 20



state 14

    func_body  ->  '{' stmt_list . '}'   (rule 4)
    stmt_list  ->  stmt_list . mark stmt   (rule 6)

    '}' 	shift, and go to state 21

    $default	reduce using rule 17 (mark)

    mark	go to state 22



state 15

    stmt_list  ->  stmt .   (rule 5)

    $default	reduce using rule 5 (stmt_list)



state 16

    stmt  ->  assign . ';'   (rule 8)

    ';' 	shift, and go to state 23



state 17

    assign  ->  id . '=' expr   (rule 11)

    '=' 	shift, and go to state 24



state 18

    stmt  ->  IF '(' . cond ')' mark stmt jump_mark ELSE mark stmt   (rule 7)

    IDENT	shift, and go to state 5
    NUM 	shift, and go to state 25

    cond	go to state 26
    expr	go to state 27
    id  	go to state 28



state 19

    stmt  ->  RET NUM . ';'   (rule 9)

    ';' 	shift, and go to state 29



state 20

    stmt  ->  WHILE '(' . cond ')' stmt   (rule 10)

    IDENT	shift, and go to state 5
    NUM 	shift, and go to state 25

    cond	go to state 30
    expr	go to state 27
    id  	go to state 28



state 21

    func_body  ->  '{' stmt_list '}' .   (rule 4)

    $default	reduce using rule 4 (func_body)



state 22

    stmt_list  ->  stmt_list mark . stmt   (rule 6)

    IDENT	shift, and go to state 5
    IF  	shift, and go to state 11
    RET 	shift, and go to state 12
    WHILE	shift, and go to state 13

    stmt	go to state 31
    assign	go to state 16
    id  	go to state 17



state 23

    stmt  ->  assign ';' .   (rule 8)

    $default	reduce using rule 8 (stmt)



state 24

    assign  ->  id '=' . expr   (rule 11)

    IDENT	shift, and go to state 5
    NUM 	shift, and go to state 25

    expr	go to state 32
    id  	go to state 28



state 25

    expr  ->  NUM .   (rule 15)

    $default	reduce using rule 15 (expr)



state 26

    stmt  ->  IF '(' cond . ')' mark stmt jump_mark ELSE mark stmt   (rule 7)

    ')' 	shift, and go to state 33



state 27

    cond  ->  expr . EQ expr   (rule 12)
    cond  ->  expr . LE expr   (rule 13)

    EQ  	shift, and go to state 34
    LE  	shift, and go to state 35



state 28

    expr  ->  id .   (rule 14)

    $default	reduce using rule 14 (expr)



state 29

    stmt  ->  RET NUM ';' .   (rule 9)

    $default	reduce using rule 9 (stmt)



state 30

    stmt  ->  WHILE '(' cond . ')' stmt   (rule 10)

    ')' 	shift, and go to state 36



state 31

    stmt_list  ->  stmt_list mark stmt .   (rule 6)

    $default	reduce using rule 6 (stmt_list)



state 32

    assign  ->  id '=' expr .   (rule 11)

    $default	reduce using rule 11 (assign)



state 33

    stmt  ->  IF '(' cond ')' . mark stmt jump_mark ELSE mark stmt   (rule 7)

    $default	reduce using rule 17 (mark)

    mark	go to state 37



state 34

    cond  ->  expr EQ . expr   (rule 12)

    IDENT	shift, and go to state 5
    NUM 	shift, and go to state 25

    expr	go to state 38
    id  	go to state 28



state 35

    cond  ->  expr LE . expr   (rule 13)

    IDENT	shift, and go to state 5
    NUM 	shift, and go to state 25

    expr	go to state 39
    id  	go to state 28



state 36

    stmt  ->  WHILE '(' cond ')' . stmt   (rule 10)

    IDENT	shift, and go to state 5
    IF  	shift, and go to state 11
    RET 	shift, and go to state 12
    WHILE	shift, and go to state 13

    stmt	go to state 40
    assign	go to state 16
    id  	go to state 17



state 37

    stmt  ->  IF '(' cond ')' mark . stmt jump_mark ELSE mark stmt   (rule 7)

    IDENT	shift, and go to state 5
    IF  	shift, and go to state 11
    RET 	shift, and go to state 12
    WHILE	shift, and go to state 13

    stmt	go to state 41
    assign	go to state 16
    id  	go to state 17



state 38

    cond  ->  expr EQ expr .   (rule 12)

    $default	reduce using rule 12 (cond)



state 39

    cond  ->  expr LE expr .   (rule 13)

    $default	reduce using rule 13 (cond)



state 40

    stmt  ->  WHILE '(' cond ')' stmt .   (rule 10)

    $default	reduce using rule 10 (stmt)



state 41

    stmt  ->  IF '(' cond ')' mark stmt . jump_mark ELSE mark stmt   (rule 7)

    $default	reduce using rule 18 (jump_mark)

    jump_mark	go to state 42



state 42

    stmt  ->  IF '(' cond ')' mark stmt jump_mark . ELSE mark stmt   (rule 7)

    ELSE	shift, and go to state 43



state 43

    stmt  ->  IF '(' cond ')' mark stmt jump_mark ELSE . mark stmt   (rule 7)

    $default	reduce using rule 17 (mark)

    mark	go to state 44



state 44

    stmt  ->  IF '(' cond ')' mark stmt jump_mark ELSE mark . stmt   (rule 7)

    IDENT	shift, and go to state 5
    IF  	shift, and go to state 11
    RET 	shift, and go to state 12
    WHILE	shift, and go to state 13

    stmt	go to state 45
    assign	go to state 16
    id  	go to state 17



state 45

    stmt  ->  IF '(' cond ')' mark stmt jump_mark ELSE mark stmt .   (rule 7)

    $default	reduce using rule 7 (stmt)



state 46

    $   	go to state 47



state 47

    $   	go to state 48



state 48

    $default	accept
